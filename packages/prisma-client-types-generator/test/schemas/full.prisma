datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator types {
  provider = "tsx ./src/index"
}

model Post {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  deletedAt DateTime?

  text        String
  publishAt   DateTime?
  publishedAt DateTime?

  category   Category?     @relation(fields: [categoryId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  categoryId Int?
  toMedia    PostToMedia[]
  tags       Tag[]
  user       User          @relation(fields: [userId], references: [id])
  userId     String
}

// Create an explicit many-to-many relationship table
model PostToMedia {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  media   Media @relation(fields: [mediaId], references: [id])
  mediaId Int
  post    Post  @relation(fields: [postId], references: [id])
  postId  Int
}

model Media {
  id           Int           @id @default(autoincrement())
  url          String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime?     @updatedAt
  postToMedias PostToMedia[]
}

model Tag {
  id        Int       @id @default(autoincrement())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  posts     Post[]
}

model Category {
  id                 Int        @id @default(autoincrement())
  name               String
  parentCategoryId   Int?
  createdAt          DateTime   @default(now())
  updatedAt          DateTime?  @updatedAt
  childrenCategories Category[] @relation("SubCategories")
  parentCategory     Category?  @relation("SubCategories", fields: [parentCategoryId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Post               Post[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime?     @updatedAt
  post          Post[]
  accounts      Account[]
  sessions      Session[]
  settings      UserSettings?
}

model UserSettings {
  id       String @id @default(cuid())
  userId   String @unique
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  language String
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model AdminUser {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          Role      @default(READER)
  audit         Audit[]
}

model Audit {
  id       String     @id @default(cuid())
  date     DateTime   @default(now())
  resource String
  action   String
  payload  Json?
  authorId String?
  author   AdminUser? @relation(fields: [authorId], references: [id], onDelete: Cascade)
}

enum Role {
  COLLABORATOR
  OWNER
  READER
}
